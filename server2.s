	.file	"server2.c"
	.section	.rodata
.LC0:
	.string	"ERROR, no port provided\n"
.LC1:
	.string	"sock failed"
.LC2:
	.string	"bind failed"
.LC3:
	.string	"listen failed"
	.align 4
.LC4:
	.string	"Waiting for a client to connect\n"
.LC5:
	.string	"accept failed"
.LC6:
	.string	"Connected from %s\n"
.LC7:
	.string	"Connected!!!\n"
.LC8:
	.string	"send failed"
.LC9:
	.string	"The client closed the socket"
	.text
	.globl	main
	.type	main, @function
main:
.LFB2:
	.cfi_startproc
	leal	4(%esp), %ecx
	.cfi_def_cfa 1, 0
	andl	$-16, %esp
	pushl	-4(%ecx)
	pushl	%ebp
	.cfi_escape 0x10,0x5,0x2,0x75,0
	movl	%esp, %ebp
	pushl	%ecx
	.cfi_escape 0xf,0x3,0x75,0x7c,0x6
	subl	$116, %esp
	movl	%ecx, %eax
	movl	4(%eax), %edx
	movl	%edx, -108(%ebp)
	movl	%gs:20, %ecx
	movl	%ecx, -12(%ebp)
	xorl	%ecx, %ecx
	cmpl	$1, (%eax)
	jg	.L2
	movl	stderr, %eax
	pushl	%eax
	pushl	$24
	pushl	$1
	pushl	$.LC0
	call	fwrite
	addl	$16, %esp
	subl	$12, %esp
	pushl	$1
	call	exit
.L2:
	movl	-108(%ebp), %eax
	addl	$4, %eax
	movl	(%eax), %eax
	subl	$12, %esp
	pushl	%eax
	call	atoi
	addl	$16, %esp
	movl	%eax, -88(%ebp)
	movl	$0, -84(%ebp)
	movl	$4, -92(%ebp)
	subl	$4, %esp
	pushl	$0
	pushl	$1
	pushl	$2
	call	socket
	addl	$16, %esp
	movl	%eax, -80(%ebp)
	cmpl	$-1, -80(%ebp)
	jne	.L3
	subl	$12, %esp
	pushl	$.LC1
	call	perror
	addl	$16, %esp
	subl	$12, %esp
	pushl	$1
	call	exit
.L3:
	movw	$2, -68(%ebp)
	movl	-88(%ebp), %eax
	movzwl	%ax, %eax
	subl	$12, %esp
	pushl	%eax
	call	htons
	addl	$16, %esp
	movw	%ax, -66(%ebp)
	movl	$0, -64(%ebp)
	subl	$8, %esp
	pushl	$8
	leal	-68(%ebp), %eax
	addl	$8, %eax
	pushl	%eax
	call	bzero
	addl	$16, %esp
	subl	$4, %esp
	pushl	$16
	leal	-68(%ebp), %eax
	pushl	%eax
	pushl	-80(%ebp)
	call	bind
	addl	$16, %esp
	cmpl	$-1, %eax
	jne	.L4
	subl	$12, %esp
	pushl	$.LC2
	call	perror
	addl	$16, %esp
	subl	$12, %esp
	pushl	$1
	call	exit
.L4:
	subl	$8, %esp
	pushl	$10
	pushl	-80(%ebp)
	call	listen
	addl	$16, %esp
	cmpl	$-1, %eax
	jne	.L5
	subl	$12, %esp
	pushl	$.LC3
	call	perror
	addl	$16, %esp
	subl	$12, %esp
	pushl	$1
	call	exit
.L5:
	subl	$12, %esp
	pushl	$.LC4
	call	puts
	addl	$16, %esp
	movl	$16, -96(%ebp)
	subl	$4, %esp
	leal	-96(%ebp), %eax
	pushl	%eax
	leal	-52(%ebp), %eax
	pushl	%eax
	pushl	-80(%ebp)
	call	accept
	addl	$16, %esp
	movl	%eax, -76(%ebp)
	cmpl	$-1, -76(%ebp)
	jne	.L6
	subl	$12, %esp
	pushl	$.LC5
	call	perror
	addl	$16, %esp
	subl	$12, %esp
	pushl	$1
	call	exit
.L6:
	pushl	$16
	leal	-28(%ebp), %eax
	pushl	%eax
	leal	-52(%ebp), %eax
	addl	$4, %eax
	pushl	%eax
	pushl	$2
	call	inet_ntop
	addl	$16, %esp
	subl	$8, %esp
	pushl	%eax
	pushl	$.LC6
	call	printf
	addl	$16, %esp
	pushl	$0
	pushl	$13
	pushl	$.LC7
	pushl	-76(%ebp)
	call	send
	addl	$16, %esp
	cmpl	$-1, %eax
	jne	.L7
	subl	$12, %esp
	pushl	$.LC8
	call	perror
	addl	$16, %esp
	subl	$12, %esp
	pushl	-76(%ebp)
	call	close
	addl	$16, %esp
	subl	$12, %esp
	pushl	$1
	call	exit
.L7:
	subl	$12, %esp
	leal	-92(%ebp), %eax
	pushl	%eax
	leal	-100(%ebp), %eax
	pushl	%eax
	pushl	$7
	pushl	$1
	pushl	-76(%ebp)
	call	getsockopt
	addl	$32, %esp
	movl	-100(%ebp), %eax
	subl	$12, %esp
	pushl	%eax
	call	malloc
	addl	$16, %esp
	movl	%eax, -72(%ebp)
	movl	-100(%ebp), %eax
	pushl	$0
	pushl	%eax
	pushl	-72(%ebp)
	pushl	-76(%ebp)
	call	recv
	addl	$16, %esp
	movl	%eax, -84(%ebp)
	cmpl	$0, -84(%ebp)
	jg	.L8
	subl	$12, %esp
	pushl	$.LC9
	call	puts
	addl	$16, %esp
	subl	$12, %esp
	pushl	-76(%ebp)
	call	close
	addl	$16, %esp
	jmp	.L12
.L8:
	movl	-84(%ebp), %edx
	movl	-72(%ebp), %eax
	addl	%edx, %eax
	movb	$0, (%eax)
	subl	$8, %esp
	pushl	-72(%ebp)
	leal	-33(%ebp), %eax
	pushl	%eax
	call	strcpy
	addl	$16, %esp
	subl	$12, %esp
	leal	-33(%ebp), %eax
	pushl	%eax
	call	strlen
	addl	$16, %esp
	pushl	$0
	pushl	%eax
	leal	-33(%ebp), %eax
	pushl	%eax
	pushl	-76(%ebp)
	call	send
	addl	$16, %esp
	cmpl	$-1, %eax
	jne	.L10
	subl	$12, %esp
	pushl	$.LC8
	call	perror
	addl	$16, %esp
	subl	$12, %esp
	pushl	-76(%ebp)
	call	close
	addl	$16, %esp
	subl	$12, %esp
	pushl	$1
	call	exit
.L10:
	subl	$4, %esp
	pushl	-84(%ebp)
	leal	-33(%ebp), %eax
	pushl	%eax
	pushl	-72(%ebp)
	call	display_connection_data
	addl	$16, %esp
	jmp	.L7
.L12:
	jmp	.L5
	.cfi_endproc
.LFE2:
	.size	main, .-main
	.section	.rodata
.LC10:
	.string	"RECEIVED: %s"
.LC11:
	.string	"SENT: %s"
.LC12:
	.string	"RECEIVED BYTES: %d\n\n"
	.text
	.globl	display_connection_data
	.type	display_connection_data, @function
display_connection_data:
.LFB3:
	.cfi_startproc
	pushl	%ebp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	movl	%esp, %ebp
	.cfi_def_cfa_register 5
	subl	$8, %esp
	subl	$8, %esp
	pushl	8(%ebp)
	pushl	$.LC10
	call	printf
	addl	$16, %esp
	subl	$8, %esp
	pushl	12(%ebp)
	pushl	$.LC11
	call	printf
	addl	$16, %esp
	subl	$8, %esp
	pushl	16(%ebp)
	pushl	$.LC12
	call	printf
	addl	$16, %esp
	movl	$0, %eax
	leave
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
.LFE3:
	.size	display_connection_data, .-display_connection_data
	.ident	"GCC: (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609"
	.section	.note.GNU-stack,"",@progbits
